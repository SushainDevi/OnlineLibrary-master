const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');

const app = express();
const PORT = 8000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/library', { useNewUrlParser: true, useUnifiedTopology: true });

// Create a schema for cart items
const cartItemSchema = new mongoose.Schema({
    bookId: Number,
    title: String,
    author: String,
    imageSrc: String,
});

// Create a model for cart items
const CartItem = mongoose.model('CartItem', cartItemSchema);

app.use(bodyParser.json());

// Route to handle issuing items to the database
app.post('/issue', async (req, res) => {
    try {
        const cartItems = req.body.cartItems;

        // Save cart items to the database
        await CartItem.insertMany(cartItems);

        res.json({ success: true, message: 'Items issued and saved to the database' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ success: false, message: 'Error issuing items to the database' });
    }
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});


// used one


// issue.js

const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const app = express();
const port = 8001;

mongoose.connect("mongodb+srv://shreyaskalate9:shreyas123123@databaseconnect.a4gtyyu.mongodb.net/bookDatabase", { useNewUrlParser: true, useUnifiedTopology: true });

var bookSchema = new mongoose.Schema({
    Title: String,
    Author: String,
    ImageSrc: String,
}); 

const book = mongoose.model('book', bookSchema);

app.use(bodyParser.json());

app.set('view engine', 'ejs');

app.set('views', __dirname + '/library'); // Adjust the path to your HTML files



//endpoints
app.get('/',(req,res)=>{
    const par={}
    res.status(200).render('home.html',par);
})

app.get('/contact',(req,res)=>{
    const par={}
    res.status(200).render('cart.html',par);
})


app.post('/issue', (req, res) => {
    const cartItems = req.body.cartItems;

    // Assuming each cart item has Title, Author, and ImageSrc properties
    const itemsToSave = cartItems.map(item => ({
        Title: item.title,
        Author: item.author,
        ImageSrc: item.imageSrc,
    }));

    Contact.insertMany(itemsToSave)
        .then(() => {
            res.json({ success: true, message: 'Items have been saved to the database' });
        })
        .catch(error => {
            res.status(500).json({ success: false, message: 'Error saving items to the database', error: error.message });
        });
});

app.listen(port, () => {
    console.log(`Server is listening on port ${port}`);
});


// const express = require('express');
// const bodyParser = require('body-parser');
// const mongoose = require('mongoose');
// const path=require('path');
// const app = express();
// const PORT = 8001;

// // Connect to MongoDB
// mongoose.connect('mongodb://localhost:27017/library', { useNewUrlParser: true, useUnifiedTopology: true });

// // Create a schema for cart items
// const cartItemSchema = new mongoose.Schema({
//     bookId: Number,
//     title: String,
//     author: String,
//     imageSrc: String,
// });

// // Create a model for cart items
// const CartItem = mongoose.model('CartItem', cartItemSchema);

// app.use(bodyParser.json());

// app.set('view engine','express') //set view engine as pug
// app.set('library',path.join(__dirname,'library'))

// //endpoints
// app.get('/',(req,res)=>{
//     const par={}
//     res.status(200).render('home.html',par);
// })


// app.get('/cart',(req,res)=>{
//     const par={}
//     res.status(200).render('cart.html',par);
// })

// // Route to handle issuing items to the database
// // Route to handle issuing items to the database
// app.post('/issue', async (req, res) => {
//     try {
//         const cartItems = req.body.cartItems;

//         // Insert each cart item individually
//         for (const cartItem of cartItems) {
//             await new CartItem(cartItem).save();
//         }

//         res.json({ success: true, message: 'Items issued and saved to the database' });
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ success: false, message: 'Error issuing items to the database' });
//     }
// });


// app.listen(PORT, () => {
//     console.log(`Server is running on http://localhost:${PORT}`);
// });




